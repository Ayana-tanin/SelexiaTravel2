"""
–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –±–µ–∑ GNU gettext
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç babel –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ .po —Ñ–∞–π–ª–æ–≤ –≤ .mo
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from pathlib import Path
from babel.messages.pofile import read_po
from babel.messages.mofile import write_mo


class Command(BaseCommand):
    help = '–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç .po —Ñ–∞–π–ª—ã –≤ .mo —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—è babel (–±–µ–∑ GNU gettext)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--locale', '-l',
            dest='locale',
            help='–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en)'
        )
        parser.add_argument(
            '--all', '-a',
            action='store_true',
            dest='all',
            help='–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞–ª–µ–π'
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤...')
        
        locale_paths = getattr(settings, 'LOCALE_PATHS', [])
        if not locale_paths:
            self.stdout.write(self.style.ERROR('‚ùå LOCALE_PATHS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py'))
            return
        
        success_count = 0
        total_count = 0
        
        for locale_path in locale_paths:
            locale_path = Path(locale_path)
            if not locale_path.exists():
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ª–æ–∫–∞–ª–∏ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
            if options['locale']:
                locales_to_compile = [options['locale']]
            elif options['all']:
                locales_to_compile = [d.name for d in locale_path.iterdir() 
                                   if d.is_dir() and d.name != '__pycache__']
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≤—Å–µ
                locales_to_compile = [d.name for d in locale_path.iterdir() 
                                   if d.is_dir() and d.name != '__pycache__']
            
            for locale in locales_to_compile:
                lc_messages_dir = locale_path / locale / 'LC_MESSAGES'
                if lc_messages_dir.exists():
                    po_file = lc_messages_dir / 'django.po'
                    mo_file = lc_messages_dir / 'django.mo'
                    
                    if po_file.exists():
                        total_count += 1
                        if self._compile_po_to_mo(po_file, mo_file):
                            success_count += 1
        
        self.stdout.write(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
        self.stdout.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
        
        if success_count == total_count:
            self.stdout.write(self.style.SUCCESS('üéâ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã!'))
        else:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å'))

    def _compile_po_to_mo(self, po_file_path, mo_file_path):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç .po —Ñ–∞–π–ª –≤ .mo —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º .po —Ñ–∞–π–ª
            with open(po_file_path, 'r', encoding='utf-8') as f:
                catalog = read_po(f)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º .mo —Ñ–∞–π–ª
            with open(mo_file_path, 'wb') as f:
                write_mo(f, catalog)
            
            self.stdout.write(f"‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω: {po_file_path} -> {mo_file_path}")
            return True
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ {po_file_path}: {e}")
            )
            return False
