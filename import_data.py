#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL –Ω–∞ Railway
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python import_data.py
"""

import os
import sys
import django
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django –¥–ª—è Railway
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selexia_travel.settings')
os.environ.setdefault('RAILWAY_ENVIRONMENT', 'True')
django.setup()

from django.contrib.auth import get_user_model
from selexia_travel.models import Country, City, Excursion, Review, Booking, UserSettings
from django.core.management import call_command
from django.db import transaction

def import_model_data(model_class, filename):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            print(f"‚ö†Ô∏è {model_class.__name__}: –§–∞–π–ª –ø—É—Å—Ç")
            return False
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        imported_count = 0
        for item in data:
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
                fields = item['fields']
                obj = model_class(**fields)
                obj.save()
                imported_count += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        print(f"‚úÖ {model_class.__name__}: {imported_count} –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {model_class.__name__}: {e}")
        return False

def import_users():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        filename = 'data/users.json'
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            print(f"‚ö†Ô∏è Users: –§–∞–π–ª –ø—É—Å—Ç")
            return False
        
        User = get_user_model()
        imported_count = 0
        
        for item in data:
            try:
                fields = item['fields']
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    username=fields.get('username', f"user_{imported_count}"),
                    email=fields.get('email', f"user{imported_count}@example.com"),
                    first_name=fields.get('first_name', ''),
                    last_name=fields.get('last_name', ''),
                    is_active=fields.get('is_active', True),
                    is_staff=fields.get('is_staff', False),
                    is_superuser=fields.get('is_superuser', False),
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                user.set_password('password123')
                user.save()
                
                imported_count += 1
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                continue
        
        print(f"‚úÖ Users: {imported_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Users: {e}")
        return False

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
        countries_data = [
            {'name_ru': '–ì—Ä–µ—Ü–∏—è', 'name_en': 'Greece', 'description_ru': '–î—Ä–µ–≤–Ω—è—è —Å—Ç—Ä–∞–Ω–∞ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π', 'is_popular': True},
            {'name_ru': '–ò—Ç–∞–ª–∏—è', 'name_en': 'Italy', 'description_ru': '–°—Ç—Ä–∞–Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –∫—É–ª—å—Ç—É—Ä—ã', 'is_popular': True},
            {'name_ru': '–ò—Å–ø–∞–Ω–∏—è', 'name_en': 'Spain', 'description_ru': '–°—Ç—Ä–∞–Ω–∞ —Ñ–ª–∞–º–µ–Ω–∫–æ –∏ –∫–æ—Ä—Ä–∏–¥—ã', 'is_popular': True},
            {'name_ru': '–¢—É—Ä—Ü–∏—è', 'name_en': 'Turkey', 'description_ru': '–ú–æ—Å—Ç –º–µ–∂–¥—É –ï–≤—Ä–æ–ø–æ–π –∏ –ê–∑–∏–µ–π', 'is_popular': True},
            {'name_ru': '–ï–≥–∏–ø–µ—Ç', 'name_en': 'Egypt', 'description_ru': '–°—Ç—Ä–∞–Ω–∞ –ø–∏—Ä–∞–º–∏–¥ –∏ —Ñ–∞—Ä–∞–æ–Ω–æ–≤', 'is_popular': True},
        ]
        
        for country_data in countries_data:
            country, created = Country.objects.get_or_create(
                name_ru=country_data['name_ru'],
                defaults=country_data
            )
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country.name_ru}")
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞
        cities_data = [
            {'name_ru': '–ê—Ñ–∏–Ω—ã', 'name_en': 'Athens', 'country': Country.objects.get(name_ru='–ì—Ä–µ—Ü–∏—è'), 'is_popular': True},
            {'name_ru': '–†–∏–º', 'name_en': 'Rome', 'country': Country.objects.get(name_ru='–ò—Ç–∞–ª–∏—è'), 'is_popular': True},
            {'name_ru': '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', 'name_en': 'Barcelona', 'country': Country.objects.get(name_ru='–ò—Å–ø–∞–Ω–∏—è'), 'is_popular': True},
            {'name_ru': '–°—Ç–∞–º–±—É–ª', 'name_en': 'Istanbul', 'country': Country.objects.get(name_ru='–¢—É—Ä—Ü–∏—è'), 'is_popular': True},
            {'name_ru': '–ö–∞–∏—Ä', 'name_en': 'Cairo', 'country': Country.objects.get(name_ru='–ï–≥–∏–ø–µ—Ç'), 'is_popular': True},
        ]
        
        for city_data in cities_data:
            city, created = City.objects.get_or_create(
                name_ru=city_data['name_ru'],
                defaults=city_data
            )
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: {city.name_ru}")
        
        print("‚úÖ –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÇ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Railway PostgreSQL...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {version[0] if version else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    print("\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    try:
        call_command('migrate', verbosity=1)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    data_folder = 'data'
    if os.path.exists(data_folder) and os.listdir(data_folder):
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ '{data_folder}'")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        models_to_import = [
            (Country, 'data/countries.json'),
            (City, 'data/cities.json'),
            (Excursion, 'data/excursions.json'),
            (Review, 'data/reviews.json'),
            (Booking, 'data/bookings.json'),
            (UserSettings, 'data/user_settings.json'),
        ]
        
        imported_count = 0
        for model_class, filename in models_to_import:
            if import_model_data(model_class, filename):
                imported_count += 1
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if import_users():
            imported_count += 1
        
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.")
        
    else:
        print(f"\nüìù –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã...")
        create_sample_data()
    
    # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    try:
        User = get_user_model()
        if not User.objects.filter(is_superuser=True).exists():
            user = User.objects.create_superuser(
                username='admin',
                email='admin@railway.app',
                password='admin123'
            )
            print(f"‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.username}")
        else:
            print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   üåç –°—Ç—Ä–∞–Ω—ã: {Country.objects.count()}")
    print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥–∞: {City.objects.count()}")
    print(f"   üéØ –≠–∫—Å–∫—É—Ä—Å–∏–∏: {Excursion.objects.count()}")
    print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.objects.count()}")
    print(f"   ‚≠ê –û—Ç–∑—ã–≤—ã: {Review.objects.count()}")
    print(f"   üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {Booking.objects.count()}")
    
    return True

if __name__ == '__main__':
    main()
