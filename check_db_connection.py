#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è SelexiaTravel
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Django ORM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import django
from pathlib import Path
from django.core.management import execute_from_command_line
from django.db import connection, transaction
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selexia_travel.settings')
django.setup()

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üóÑÔ∏è –í–µ—Ä—Å–∏—è: {version[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT current_database();")
            db_name = cursor.fetchone()
            print(f"   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name[0]}")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway")
        return False

def check_existing_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            
            if tables:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                for table in tables:
                    print(f"   ‚Ä¢ {table[0]}")
                return [table[0] for table in tables]
            else:
                print("üìã –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è")
                return []
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def create_migrations():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("   üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è selexia_travel...")
        execute_from_command_line(['manage.py', 'makemigrations', 'selexia_travel', '--verbosity=2'])
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Django
        print("   üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
        execute_from_command_line(['manage.py', 'makemigrations', '--verbosity=1'])
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Django (contenttypes, auth, etc.)
        print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π Django...")
        execute_from_command_line(['manage.py', 'migrate', 'contenttypes', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'auth', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'sessions', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'messages', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'staticfiles', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'admin', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'sites', '--verbosity=2'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è allauth
        print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π django-allauth...")
        execute_from_command_line(['manage.py', 'migrate', 'account', '--verbosity=2'])
        execute_from_command_line(['manage.py', 'migrate', 'socialaccount', '--verbosity=2'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π selexia_travel...")
        execute_from_command_line(['manage.py', 'migrate', 'selexia_travel', '--verbosity=2'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        print("   üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∏–≥—Ä–∞—Ü–∏–π...")
        execute_from_command_line(['manage.py', 'migrate', '--verbosity=2'])
        
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False

def verify_tables_created():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    try:
        with connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            
            print(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ: {len(tables)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            django_tables = []
            allauth_tables = []
            selexia_tables = []
            other_tables = []
            
            for table in tables:
                table_name = table[0]
                if table_name.startswith('django_'):
                    django_tables.append(table_name)
                elif table_name.startswith(('account_', 'socialaccount_')):
                    allauth_tables.append(table_name)
                elif table_name.startswith('selexia_travel_'):
                    selexia_tables.append(table_name)
                else:
                    other_tables.append(table_name)
            
            print(f"\nüìã Django —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({len(django_tables)}):")
            for table in django_tables:
                print(f"   ‚Ä¢ {table}")
            
            print(f"\nüë§ Django Allauth —Ç–∞–±–ª–∏—Ü—ã ({len(allauth_tables)}):")
            for table in allauth_tables:
                print(f"   ‚Ä¢ {table}")
            
            print(f"\nüè¢ SelexiaTravel —Ç–∞–±–ª–∏—Ü—ã ({len(selexia_tables)}):")
            for table in selexia_tables:
                print(f"   ‚Ä¢ {table}")
            
            if other_tables:
                print(f"\nüì¶ –î—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã ({len(other_tables)}):")
                for table in other_tables:
                    print(f"   ‚Ä¢ {table}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            expected_selexia_tables = [
                'selexia_travel_user',
                'selexia_travel_country',
                'selexia_travel_city', 
                'selexia_travel_category',
                'selexia_travel_excursion',
                'selexia_travel_excursionimage',
                'selexia_travel_booking',
                'selexia_travel_review',
                'selexia_travel_reviewimage',
                'selexia_travel_favorite',
                'selexia_travel_application',
                'selexia_travel_usersettings'
            ]
            
            missing_tables = []
            for expected_table in expected_selexia_tables:
                if expected_table not in selexia_tables:
                    missing_tables.append(expected_table)
            
            if missing_tables:
                print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã ({len(missing_tables)}):")
                for table in missing_tables:
                    print(f"   ‚Ä¢ {table}")
                return False
            else:
                print(f"\n‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã SelexiaTravel —Å–æ–∑–¥–∞–Ω—ã!")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def create_superuser():
    """–°–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    print("\nüëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if User.objects.filter(is_superuser=True).exists():
            superuser = User.objects.filter(is_superuser=True).first()
            print(f"‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {superuser.email}")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        superuser = User.objects.create_superuser(
            email='admin@selexiatravel.com',
            password='admin123',
            username='admin',
            first_name='Admin',
            last_name='User'
        )
        
        print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("   üìß Email: admin@selexiatravel.com")
        print("   üîë –ü–∞—Ä–æ–ª—å: admin123")
        print("   ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from selexia_travel.models import Country, City, Category
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
        countries_data = [
            {'name_ru': '–†–æ—Å—Å–∏—è', 'name_en': 'Russia', 'iso_code': 'RU', 'is_popular': True},
            {'name_ru': '–¢—É—Ä—Ü–∏—è', 'name_en': 'Turkey', 'iso_code': 'TR', 'is_popular': True},
            {'name_ru': '–ï–≥–∏–ø–µ—Ç', 'name_en': 'Egypt', 'iso_code': 'EG', 'is_popular': True},
            {'name_ru': '–¢–∞–∏–ª–∞–Ω–¥', 'name_en': 'Thailand', 'iso_code': 'TH', 'is_popular': True},
            {'name_ru': '–ì—Ä–µ—Ü–∏—è', 'name_en': 'Greece', 'iso_code': 'GR', 'is_popular': False},
        ]
        
        for country_data in countries_data:
            country, created = Country.objects.get_or_create(
                iso_code=country_data['iso_code'],
                defaults=country_data
            )
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country.name_ru}")
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞
        cities_data = [
            {'name_ru': '–ú–æ—Å–∫–≤–∞', 'name_en': 'Moscow', 'country_code': 'RU', 'is_popular': True},
            {'name_ru': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'name_en': 'Saint Petersburg', 'country_code': 'RU', 'is_popular': True},
            {'name_ru': '–°—Ç–∞–º–±—É–ª', 'name_en': 'Istanbul', 'country_code': 'TR', 'is_popular': True},
            {'name_ru': '–ê–Ω—Ç–∞–ª—å—è', 'name_en': 'Antalya', 'country_code': 'TR', 'is_popular': True},
            {'name_ru': '–ö–∞–∏—Ä', 'name_en': 'Cairo', 'country_code': 'EG', 'is_popular': True},
            {'name_ru': '–ë–∞–Ω–≥–∫–æ–∫', 'name_en': 'Bangkok', 'country_code': 'TH', 'is_popular': True},
            {'name_ru': '–ê—Ñ–∏–Ω—ã', 'name_en': 'Athens', 'country_code': 'GR', 'is_popular': True},
        ]
        
        for city_data in cities_data:
            try:
                country = Country.objects.get(iso_code=city_data['country_code'])
                city, created = City.objects.get_or_create(
                    name_ru=city_data['name_ru'],
                    country=country,
                    defaults={
                        'name_en': city_data['name_en'],
                        'is_popular': city_data['is_popular']
                    }
                )
                if created:
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –≥–æ—Ä–æ–¥: {city.name_ru}")
            except Country.DoesNotExist:
                print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {city_data['country_code']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            {'name_ru': '–û–±–∑–æ—Ä–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏', 'name_en': 'City Tours', 'icon': 'fas fa-city', 'color': '#007bff', 'is_featured': True},
            {'name_ru': '–ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏', 'name_en': 'Museums & Galleries', 'icon': 'fas fa-university', 'color': '#28a745', 'is_featured': True},
            {'name_ru': '–ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏', 'name_en': 'Nature & Parks', 'icon': 'fas fa-tree', 'color': '#20c997', 'is_featured': True},
            {'name_ru': '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã', 'name_en': 'Food Tours', 'icon': 'fas fa-utensils', 'color': '#fd7e14', 'is_featured': True},
            {'name_ru': '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', 'name_en': 'Adventures', 'icon': 'fas fa-mountain', 'color': '#dc3545', 'is_featured': False},
            {'name_ru': '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è', 'name_en': 'Culture & History', 'icon': 'fas fa-landmark', 'color': '#6f42c1', 'is_featured': False},
        ]
        
        for category_data in categories_data:
            category, created = Category.objects.get_or_create(
                name_ru=category_data['name_ru'],
                defaults=category_data
            )
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name_ru}")
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def show_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("\n" + "=" * 60)
    print("üéâ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("=" * 60)
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT COUNT(*) 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE';
            """)
            total_tables = cursor.fetchone()[0]
        
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {total_tables}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        from django.contrib.auth import get_user_model
        User = get_user_model()
        
        total_users = User.objects.count()
        superusers = User.objects.filter(is_superuser=True).count()
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_users}")
        print(f"üëë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {superusers}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        from selexia_travel.models import Country, City, Category
        
        countries_count = Country.objects.count()
        cities_count = City.objects.count()
        categories_count = Category.objects.count()
        
        print(f"üåç –°—Ç—Ä–∞–Ω: {countries_count}")
        print(f"üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤: {cities_count}")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    print("2. üîê –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É: http://127.0.0.1:8000/admin/")
    print("3. üìä –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É –∏–ª–∏ API")
    print("4. üé® –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (Vue.js)")
    print("\nüîí –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:")
    print("   Email: admin@selexiatravel.com")
    print("   –ü–∞—Ä–æ–ª—å: admin123")
    print("   ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –ë–ê–ó–´ –î–ê–ù–ù–´–• SELEXIATRAVEL")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_database_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    existing_tables = check_existing_tables()
    
    # 3. –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    if not create_migrations():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        return False
    
    # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    if not apply_migrations():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    if not verify_tables_created():
        print("\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 6. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_superuser()
    
    # 7. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    create_sample_data()
    
    # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    show_summary()
    
    return True

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)